# Generated by Django 4.1.1 on 2023-02-23 08:10

from django.db import migrations, models
import django.db.models.deletion
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ugosite', '0003_rename_parent_subject_chapter_subject_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChannelId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_text', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelSectionId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_text', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelSectionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_data', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=200)),
                ('description', models.TextField(default=None, max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_text', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistItemResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_data', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_data', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('division', models.CharField(default=None, max_length=200, null=True)),
                ('year', models.SmallIntegerField(default=None, null=True)),
                ('question_num', models.SmallIntegerField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=200)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='VideoId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_text', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VideoResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_data', models.JSONField()),
                ('new_json_data', models.JSONField(blank=True, help_text='補正後のデータです。', null=True)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='VideoType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VideoGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, unique=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ugosite.category')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=200)),
                ('problem', models.TextField(default=None, max_length=10000, null=True)),
                ('point', models.TextField(default=None, max_length=10000, null=True)),
                ('table_list', django_mysql.models.ListCharField(models.CharField(max_length=100), max_length=2100, null=True, size=20)),
                ('thumbnail_url', models.URLField(default='', max_length=50, null=True)),
                ('source', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='youtube.source')),
                ('terms', models.ManyToManyField(to='ugosite.term')),
                ('videoId', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to='youtube.videoid')),
                ('video_genre', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='youtube.videogenre')),
                ('video_type', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='youtube.videotype')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='source',
            name='university',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='youtube.university'),
        ),
        migrations.CreateModel(
            name='PlaylistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.SmallIntegerField(default=0)),
                ('playlist', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='youtube.playlist')),
                ('video', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='youtube.video')),
            ],
        ),
        migrations.AddField(
            model_name='playlist',
            name='playlistId',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to='youtube.playlistid'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='video_genre',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='youtube.videogenre'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='video_type',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='youtube.videotype'),
        ),
        migrations.CreateModel(
            name='ChannelSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=None, max_length=200)),
                ('channelSectionId', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, to='youtube.channelsectionid')),
                ('playlists', models.ManyToManyField(to='youtube.playlist')),
            ],
        ),
    ]
